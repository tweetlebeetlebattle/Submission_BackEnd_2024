// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Data.Models.DailyGifReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("DailyWaveAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMin")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WaveUnitId");

                    b.ToTable("DailyGifReading");
                });

            modelBuilder.Entity("Backend.Data.Models.DailyGlassStormReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("DailyTempAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyTempMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyTempMin")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMin")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWindAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWindMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWindMin")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("TempUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WindUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TempUnitId");

                    b.HasIndex("WaveUnitId");

                    b.HasIndex("WindUnitId");

                    b.ToTable("DailyGlassStormReading");
                });

            modelBuilder.Entity("Backend.Data.Models.DailyHTMLReading", b =>
                {
                    b.Property<int>("DailyHTMLReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyHTMLReadingId"));

                    b.Property<float?>("DailyTempAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyTempMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyTempMin")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveAvg")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMax")
                        .HasColumnType("real");

                    b.Property<float?>("DailyWaveMin")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("TempUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.HasKey("DailyHTMLReadingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TempUnitId");

                    b.HasIndex("WaveUnitId");

                    b.ToTable("DailyHTMLReading");
                });

            modelBuilder.Entity("Backend.Data.Models.DataFetchingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusLog")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DataFetchingLogs");
                });

            modelBuilder.Entity("Backend.Data.Models.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MediaId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<float?>("TempRead")
                        .HasColumnType("real");

                    b.Property<int?>("TempUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<float?>("WaveRead")
                        .HasColumnType("real");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("WindSpeedIndex")
                        .HasColumnType("real");

                    b.Property<int?>("WindSpeedUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaId");

                    b.HasIndex("TempUnitId");

                    b.HasIndex("WaveUnitId");

                    b.HasIndex("WindSpeedUnitId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Backend.Data.Models.GifData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<float?>("WaveRead")
                        .HasColumnType("real");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WaveUnitId");

                    b.ToTable("GifData");
                });

            modelBuilder.Entity("Backend.Data.Models.GlassStormIoData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<float?>("TempRead")
                        .HasColumnType("real");

                    b.Property<int?>("TempUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("WaveRead")
                        .HasColumnType("real");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("WindSpeedIndex")
                        .HasColumnType("real");

                    b.Property<int?>("WindSpeedUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TempUnitId");

                    b.HasIndex("WaveUnitId");

                    b.HasIndex("WindSpeedUnitId");

                    b.ToTable("GlassStormIoData");
                });

            modelBuilder.Entity("Backend.Data.Models.HTMLData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<float?>("TempRead")
                        .HasColumnType("real");

                    b.Property<int?>("TempUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("WaveRead")
                        .HasColumnType("real");

                    b.Property<int?>("WaveUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TempUnitId");

                    b.HasIndex("WaveUnitId");

                    b.ToTable("HTMLData");
                });

            modelBuilder.Entity("Backend.Data.Models.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Шабла"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Калиакра"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Варна"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Емине"
                        },
                        new
                        {
                            Id = -5,
                            Name = "Бургас"
                        },
                        new
                        {
                            Id = -6,
                            Name = "Ахтопол"
                        });
                });

            modelBuilder.Entity("Backend.Data.Models.Media", b =>
                {
                    b.Property<string>("MediaId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TextUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MediaId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Backend.Data.Models.SeaBlog", b =>
                {
                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MediaId");

                    b.ToTable("SeaBlog");
                });

            modelBuilder.Entity("Backend.Data.Models.SeaComment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParentBlogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MediaId");

                    b.HasIndex("ParentBlogId");

                    b.ToTable("SeaComment");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingBlog", b =>
                {
                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MediaId");

                    b.ToTable("TrainingBlog");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingComment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParentBlogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MediaId");

                    b.HasIndex("ParentBlogId");

                    b.ToTable("TrainingComment");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingLog", b =>
                {
                    b.Property<string>("TrainingLogId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("TargetRepsCount")
                        .HasColumnType("int");

                    b.Property<int>("TargetSetCount")
                        .HasColumnType("int");

                    b.Property<float>("TargetWorkingWeight")
                        .HasColumnType("real");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("TrainingLogId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("TrainingLog");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingSetsLog", b =>
                {
                    b.Property<string>("WorkSetId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DoneRepCount")
                        .HasColumnType("int");

                    b.Property<int>("DoneSetCount")
                        .HasColumnType("int");

                    b.Property<string>("MediaId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingLogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("WorkSetId");

                    b.HasIndex("MediaId");

                    b.HasIndex("TrainingLogId");

                    b.ToTable("TrainingSetsLog");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TrainingUnits");
                });

            modelBuilder.Entity("Backend.Data.Models.Units", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = -1,
                            UnitName = "Бала"
                        },
                        new
                        {
                            UnitId = -2,
                            UnitName = "Метра"
                        },
                        new
                        {
                            UnitId = -3,
                            UnitName = "°C"
                        },
                        new
                        {
                            UnitId = -4,
                            UnitName = "м/с"
                        });
                });

            modelBuilder.Entity("Backend.Data.Models.UniversalReading", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<float>("Reading")
                        .HasColumnType("real");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UnitId");

                    b.ToTable("UniversalReading");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Data.ExtendedModel.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Backend.Data.Models.DailyGifReading", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.Navigation("Location");

                    b.Navigation("WaveUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.DailyGlassStormReading", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "TempUnit")
                        .WithMany()
                        .HasForeignKey("TempUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WindUnit")
                        .WithMany()
                        .HasForeignKey("WindUnitId");

                    b.Navigation("Location");

                    b.Navigation("TempUnit");

                    b.Navigation("WaveUnit");

                    b.Navigation("WindUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.DailyHTMLReading", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "TempUnit")
                        .WithMany()
                        .HasForeignKey("TempUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.Navigation("Location");

                    b.Navigation("TempUnit");

                    b.Navigation("WaveUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.Feedback", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");

                    b.HasOne("Backend.Data.Models.Units", "TempUnit")
                        .WithMany()
                        .HasForeignKey("TempUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WindSpeedUnit")
                        .WithMany()
                        .HasForeignKey("WindSpeedUnitId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Location");

                    b.Navigation("Media");

                    b.Navigation("TempUnit");

                    b.Navigation("WaveUnit");

                    b.Navigation("WindSpeedUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.GifData", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.Navigation("Location");

                    b.Navigation("WaveUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.GlassStormIoData", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "TempUnit")
                        .WithMany()
                        .HasForeignKey("TempUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WindSpeedUnit")
                        .WithMany()
                        .HasForeignKey("WindSpeedUnitId");

                    b.Navigation("Location");

                    b.Navigation("TempUnit");

                    b.Navigation("WaveUnit");

                    b.Navigation("WindSpeedUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.HTMLData", b =>
                {
                    b.HasOne("Backend.Data.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Units", "TempUnit")
                        .WithMany()
                        .HasForeignKey("TempUnitId");

                    b.HasOne("Backend.Data.Models.Units", "WaveUnit")
                        .WithMany()
                        .HasForeignKey("WaveUnitId");

                    b.Navigation("Location");

                    b.Navigation("TempUnit");

                    b.Navigation("WaveUnit");
                });

            modelBuilder.Entity("Backend.Data.Models.Media", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("Medias")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Backend.Data.Models.SeaBlog", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("SeaBlogs")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Backend.Data.Models.SeaComment", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("SeaComments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.SeaBlog", "ParentBlog")
                        .WithMany("SeaComments")
                        .HasForeignKey("ParentBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Media");

                    b.Navigation("ParentBlog");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingBlog", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("TrainingBlogs")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingComment", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("TrainingComments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.TrainingBlog", "ParentBlog")
                        .WithMany("TrainingComments")
                        .HasForeignKey("ParentBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Media");

                    b.Navigation("ParentBlog");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingLog", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithOne("TrainingLogs")
                        .HasForeignKey("Backend.Data.Models.TrainingLog", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.TrainingUnits", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingSetsLog", b =>
                {
                    b.HasOne("Backend.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");

                    b.HasOne("Backend.Data.Models.TrainingLog", "TrainingLog")
                        .WithMany()
                        .HasForeignKey("TrainingLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("TrainingLog");
                });

            modelBuilder.Entity("Backend.Data.Models.UniversalReading", b =>
                {
                    b.HasOne("Backend.Data.ExtendedModel.ApplicationUser", "ApplicationUser")
                        .WithMany("UniversalReadings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.TrainingUnits", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Data.Models.SeaBlog", b =>
                {
                    b.Navigation("SeaComments");
                });

            modelBuilder.Entity("Backend.Data.Models.TrainingBlog", b =>
                {
                    b.Navigation("TrainingComments");
                });

            modelBuilder.Entity("Backend.Data.ExtendedModel.ApplicationUser", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Medias");

                    b.Navigation("SeaBlogs");

                    b.Navigation("SeaComments");

                    b.Navigation("TrainingBlogs");

                    b.Navigation("TrainingComments");

                    b.Navigation("TrainingLogs")
                        .IsRequired();

                    b.Navigation("UniversalReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
